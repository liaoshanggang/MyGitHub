<?xml version="1.0" encoding="UTF-8"?>
<!-- spring bean容器 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd    
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd    
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<!-- 配置需要扫描的包 -->
	<!-- ①通过<context:component-scan>。SpringMVC在接受到请求后，就会去在该包内寻找标记有@Controller的处理类，再在找到的处理类中寻找标记有@RequestMapping的处理方法。 
		若找到请求路径和处理方法相匹配，就会用该处理方法来处理此请求。 -->
	<!-- 3、扫描控制器的包 -->
	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com.lanqiao.controller" />



	<!-- ②注册自定义类型转换器 -->
	<!-- ①将自定义的类型转换器加入SpringIOC容器 -->
	<bean id="studentConverter" class="com.lanqiao.converter.StudentConverter"></bean>
	<!-- ②将自定义的类型转换器注册到 SpringMVC提供的 ConversionServiceFactoryBean中 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters"><!-- ConversionServiceFactoryBean -->
			<set>
				<ref bean="studentConverter" />
			</set>
		</property>
	</bean>
	<!--③ 将自定义的类型转换器所在的ConversionServiceFactoryBean， 注册到annotation-driven之中 -->


	<!--支持spring3.0+ 新的mvc注解,不加有些注解功能不行，如json转换的@ResponseBody <context:annotation-config/> 
		将隐式地向 Spring 容器注册 1. AutowiredAnnotationBeanPostProcessor 2. CommonAnnotationBeanPostProcessor 
		3. PersistenceAnnotationBeanPostProcessor 4. RequiredAnnotationBeanPostProcessor 
		这 4 个 BeanPostProcessor。 -->
	<!-- 4、驱动，用到springmvc 的注解，bean。。 -->
	<!-- 目的是为了在访问静态资源的同时，也能正常的访问其他非静态资源 -->
	<mvc:annotation-driven conversion-service="conversionService">
	</mvc:annotation-driven>

	<!-- 只加就会造成只能访问静态资源，而无法访问非静态资源。 -->
	<!-- 6、 -->
	<!-- 将所静态资源的请求交给web服务器默认的Servlet来处理，而不是让springmvc的核心控制器：DispatcherServlet 
		对于不同的web服务器的默认Servlet名称是不同，tomcat的默认Servlet名称为"default" -->
	<mvc:default-servlet-handler />
	<!-- ②通过<bean>指定视图解析器为“InternalResourceViewResolver”类型。 此解析器会把“请求处理类中处理方法的返回值”按照“前缀+方法返回值+后缀”的形式进行加工，并把加工后的返回值作为目的路径进行跳转。 -->
	<!-- 配置试图解析器：把请求处理类的返回值，加工成最终的视图路径 -->
	<!-- 5、视图，内部资源解析器 -->
	<!--对模型视图名称的解析，即在模型视图名称添加前后缀 p:prefix="/views/" p:suffix=".jsp" 视图解析器，其作用会Controller方法返回的字符串解析为对应的视图名:prefix 
		+ string + suffix 例如Controller方法返回的字符串为"success": /views/success.jsp -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/views/" />
		<property name="suffix" value=".jsp" />
		<!-- 如果使用jstl的话，配置下面的属性 -->
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
	</bean>
	<!-- 加载国际化资源文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n" />
	</bean>
	<mvc:view-controller path="/testViewController"
		view-name="success" />
	<!-- 格式化数据 -->
	<!-- <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"> 
		</bean> -->
</beans>	